#!/usr/bin/perl

# Copyright (c) 2012 Jason Hancock <jsnbyh@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# This file is part of the nagios-redis bundle that can be found
# at https://github.com/jasonhancock/nagios-redis

use strict;
use warnings;
use Redis;
use Nagios::Plugin;
use Nagios::Plugin::Threshold;

my $host = 'localhost';
my $port = 6379;

my $np = Nagios::Plugin->new(
    usage     => "Usage: %s -H <hostname> [-P <password>] [-p <port>] [-w <warning>] [-c <critical]\n",
    version   => '0.0.1',
    plugin    => $0,
    shortname => 'Redis Memory',
    blurb     => 'Reports used_memory and used_memory_rss',
    timeout   => 10,
);

$np->add_arg(
    spec     => 'hostname|H=s',
    help     => '-H, --hostname=<hostname>',
    required => 1,
);

$np->add_arg(
    spec => 'password|P=s',
    help => '-P, --password=value'
);

$np->add_arg(
    spec => 'warning|w=s',
    help => '-w, --warning=percent'
);

$np->add_arg(
    spec => 'critical|c=s',
    help => '-c, --critical=percent'
);


$np->add_arg(
    spec     => 'port|p=s',
    help     => '-p, --port=<port>',
    default  => 6379,
);

$np->getopts;

my $redis = Redis->new(
    server    => $np->opts->hostname . ':' . $np->opts->port,
    reconnect => 2,   # try to connect for 2 seconds total
    every     => 100, # attempt to connect every 100ms
);

$redis->auth($np->opts->password) if defined($np->opts->password);

my $info = $redis->info();

my $status = 'OK';
# build the threshold object, if thresholds were set
if(defined($np->opts->warning) && defined($np->opts->critical)) {
    # read /proc/meminfo to determine total amount of memory on the system
    my %mem;
    open IN, '</proc/meminfo' or die('Can\'t read /proc/meminfo');
    while(my $line=<IN>) {
       if($line=~m/^(.+):\s+(\d+)/) {
            $mem{$1} = $2;
       }
    }
    close IN;

    # use the used_memory_rss because it's actually the amount of memory allocated
    $status = $np->check_threshold(
        check    => $info->{'used_memory_rss'},
        warning  => $np->opts->warning * .01 * $mem{'MemTotal'} * 1024,
        critical => $np->opts->critical * .01 * $mem{'MemTotal'} * 1024,
    );
}

my $msg = sprintf('used/used_rss = %d/%d',
    $info->{'used_memory'},
    $info->{'used_memory_rss'}
);

$np->add_perfdata(
    label => 'used_memory',
    value => $info->{'used_memory'},
);

$np->add_perfdata(
    label     => 'used_memory_rss',
    value     => $info->{'used_memory_rss'},
);

$np->nagios_exit($status, $msg);
